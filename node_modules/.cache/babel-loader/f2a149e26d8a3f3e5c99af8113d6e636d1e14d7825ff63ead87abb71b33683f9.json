{"ast":null,"code":"// The <canvas /> DOM element, set after page load.\nlet _canvas;\n\n// The last frame time, used to calculate delta time (dt).\nlet _lastFrameTime;\n\n// A flag to indicate if the init() function has been called.\nlet _hasInited = false;\n\n// The render loop. This is where all the magic happens.\nconst loop = time => {\n  if (!_lastFrameTime) {\n    _lastFrameTime = time;\n  }\n\n  // Calculate delta time (dt) and update the last frame time.\n  const dt = time - _lastFrameTime;\n  _lastFrameTime = time;\n\n  // Resize the canvas to fill the screen.\n  if (_canvas) {\n    _canvas.width = _canvas.clientWidth;\n    _canvas.height = _canvas.clientHeight;\n  }\n\n  // Call the init() function once and only once.\n  if (!_hasInited) {\n    if (window.init) {\n      _hasInited = true;\n      window.init(_canvas);\n    }\n  }\n\n  // Call the loop() function every frame.\n  if (window.loop) {\n    window.loop(dt, _canvas);\n  }\n  window.requestAnimationFrame(loop);\n};\n\n// Adds a script tag to the DOM with our solution.\nconst attachScript = () => {\n  const url = `clocksol.js`;\n  const scriptTag = document.createElement('script');\n  scriptTag.src = url;\n  document.head.appendChild(scriptTag);\n  document.title = `Assignment Solution`;\n};\n\n// Add a listener to the global window object for the page load.\n// See: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload)\nwindow.onload = () => {\n  // get the <canvas /> DOM element\n  _canvas = document.getElementById('canvas');\n\n  // attach the solution script\n  attachScript();\n\n  // start render loop\n  // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\n  window.requestAnimationFrame(loop);\n};\nexport default attachScript;","map":{"version":3,"names":["_canvas","_lastFrameTime","_hasInited","loop","time","dt","width","clientWidth","height","clientHeight","window","init","requestAnimationFrame","attachScript","url","scriptTag","document","createElement","src","head","appendChild","title","onload","getElementById"],"sources":["C:/Users/ajayk/Documents/ajaykumar1973/website/src/Pages/Home/clock.js"],"sourcesContent":["// The <canvas /> DOM element, set after page load.\r\nlet _canvas;\r\n\r\n// The last frame time, used to calculate delta time (dt).\r\nlet _lastFrameTime;\r\n\r\n// A flag to indicate if the init() function has been called.\r\nlet _hasInited = false;\r\n\r\n// The render loop. This is where all the magic happens.\r\nconst loop = (time) => {\r\n  if (!_lastFrameTime) {\r\n    _lastFrameTime = time;\r\n  }\r\n\r\n  // Calculate delta time (dt) and update the last frame time.\r\n  const dt = time - _lastFrameTime;\r\n  _lastFrameTime = time;\r\n\r\n  // Resize the canvas to fill the screen.\r\n  if (_canvas) {\r\n    _canvas.width = _canvas.clientWidth\r\n    _canvas.height = _canvas.clientHeight;\r\n  }\r\n\r\n  // Call the init() function once and only once.\r\n  if (!_hasInited) {\r\n    if (window.init) {\r\n      _hasInited = true;\r\n      \r\n      window.init(_canvas);\r\n    }\r\n  }\r\n\r\n  // Call the loop() function every frame.\r\n  if (window.loop) {\r\n    window.loop(dt, _canvas);\r\n  }\r\n\r\n  window.requestAnimationFrame(loop);\r\n};\r\n\r\n// Adds a script tag to the DOM with our solution.\r\nconst attachScript = () => {\r\n  const url = `clocksol.js`;\r\n  const scriptTag = document.createElement('script');\r\n  scriptTag.src = url;\r\n  document.head.appendChild(scriptTag);\r\n  document.title = `Assignment Solution`;\r\n};\r\n\r\n// Add a listener to the global window object for the page load.\r\n// See: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload)\r\nwindow.onload = () => {\r\n  // get the <canvas /> DOM element\r\n  _canvas = document.getElementById('canvas');\r\n\r\n  // attach the solution script\r\n  attachScript();\r\n\r\n  // start render loop\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\r\n  window.requestAnimationFrame(loop);\r\n};\r\nexport default attachScript;\r\n"],"mappings":"AAAA;AACA,IAAIA,OAAO;;AAEX;AACA,IAAIC,cAAc;;AAElB;AACA,IAAIC,UAAU,GAAG,KAAK;;AAEtB;AACA,MAAMC,IAAI,GAAIC,IAAI,IAAK;EACrB,IAAI,CAACH,cAAc,EAAE;IACnBA,cAAc,GAAGG,IAAI;EACvB;;EAEA;EACA,MAAMC,EAAE,GAAGD,IAAI,GAAGH,cAAc;EAChCA,cAAc,GAAGG,IAAI;;EAErB;EACA,IAAIJ,OAAO,EAAE;IACXA,OAAO,CAACM,KAAK,GAAGN,OAAO,CAACO,WAAW;IACnCP,OAAO,CAACQ,MAAM,GAAGR,OAAO,CAACS,YAAY;EACvC;;EAEA;EACA,IAAI,CAACP,UAAU,EAAE;IACf,IAAIQ,MAAM,CAACC,IAAI,EAAE;MACfT,UAAU,GAAG,IAAI;MAEjBQ,MAAM,CAACC,IAAI,CAACX,OAAO,CAAC;IACtB;EACF;;EAEA;EACA,IAAIU,MAAM,CAACP,IAAI,EAAE;IACfO,MAAM,CAACP,IAAI,CAACE,EAAE,EAAEL,OAAO,CAAC;EAC1B;EAEAU,MAAM,CAACE,qBAAqB,CAACT,IAAI,CAAC;AACpC,CAAC;;AAED;AACA,MAAMU,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,GAAG,GAAI,aAAY;EACzB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAClDF,SAAS,CAACG,GAAG,GAAGJ,GAAG;EACnBE,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,SAAS,CAAC;EACpCC,QAAQ,CAACK,KAAK,GAAI,qBAAoB;AACxC,CAAC;;AAED;AACA;AACAX,MAAM,CAACY,MAAM,GAAG,MAAM;EACpB;EACAtB,OAAO,GAAGgB,QAAQ,CAACO,cAAc,CAAC,QAAQ,CAAC;;EAE3C;EACAV,YAAY,CAAC,CAAC;;EAEd;EACA;EACAH,MAAM,CAACE,qBAAqB,CAACT,IAAI,CAAC;AACpC,CAAC;AACD,eAAeU,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}